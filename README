### PROBLEMA 1 INFINITE_PRODUCT

Problema 1 propune sa se calculeze produsul scalar a doi vectori, dandu-se coordonatele acestora urmand apoi sa se afiseze al doilea cel mai mare numar, si norma vectorilor care reprezinta radical din suma patratelor coordonatelor sale.

Am inceput prin a crea un subprogram care sa imi converteasca un numar din baza 8 in baza 10.In cadrul subprogramului am aplicat abc(8)-c*8^0+b*8^1+a*8^2 care va da numarul in baza 10.Dupa subprogram am intrat in main unde am citit n ul in care se memoreaza numarul de coordonate ale vectorilor a si b.Apoi printr-un for de la i=0 pana la i=n-1 citesc o pereche de numere (a,b) care constituie coordonatele mentionate mai sus.Dupa aceea convertim a si b la baza 10,apoi calculez produsul scalar memorat in variabila ps aplicand formula ps=ps+a*b.Dupa aceea calculam suma patratelor numerelor pentru a determina norma a doua la final.Calculam si al doilea maxim pentru coordonatele vectorilor. In variabilele primul_maxima si primul_maximb retin cele mai mari coordonate, acestea sunt initializate la inceput cu -1.Verific daca a-ul este mai mare decat primul_maxima,in caz afirmativ max_a, unde retin valoarea celui de al doilea maxim, va lua valoarea lui primul_maxima si primul_maxima va lua valoarea lui a.In caz negativ daca a nu este mai mare decat primul_maxima verific daca totusi este mai mare decat max_a, daca da actualizez valoarea lui max_a cu a.Dupa for am calculat radicalii din suma patratelor.Apoi afisez valoarea produsului scalar,cel de al doilea maxim din fiecare vector si normele cu 7 zecimale calculand sqrt din suma patratelor.

### PROBLEMA 2 CODEINVIM

Se da un numar n si apoi se citesc doi vectori: un vector cu n elemente care reprezinta notele obtinute la examen si apoi un vector care reprezinta creditele la materia la care a dat examen Mihai in anul 1.Problema ne cere sa afisam numarul minim de materii la care mai poate obtine 10 pentru a avea numarul de credite total mai mare decat un pmin care se citeste dupa vectori.Numarul de credite se calculeaza dupa formula=u[i]*v[i], i reprezantand a i-a materie.

Am creat un subprogram de tip void(sort_descending_array) prin care sa sortez cei doi vectori in ordinea descrescatoare a formulei (10-nota[i])*cred[i].Dupa aceea am creat un subprogram(remainder_sum_of_credits) de tip int care returneaza diferenta dintre numarul de credite obtinute de student si pmin.In main,am citit n-ul(numarul de elemente ale vectorului), si vectorii nota si cred.Apoi am apelat subprogramele de mai sus si am retinut in variabila rez valoarea lui remainder_sum_of_credits.Dupa aceea printr-o instructiune repetitiva cu test initial am parcursul vectorii dupa sortare si am scazut din rez valoarea lui (10 - nota[position]) * cred[position].Testul while ului este urmatoru: position<n && rez>0 fiindca dorim sa ajungem la rez <=0 si sa nu iesim din vector.In cadrul instructiunii numaram cat parcurgem in variabila sol, mai precis cate materii sunt pt a ajunge la pmnin.Dupa executarea while-ului verificam daca rez mai mare decat 0.In caz afirmativ afisam -1, fiindca nu am putut ajunge la pmin,altfel afisam sol, care reprezinta ceea ce ni s-a cerut si anume numarul minim de materii la care Mihai ar putea lua 10 dupa mariri pt a ajunge la nr de credite cerut.

### PROBLEMA 3 GIGEL_AND_THE_CHECKBOARD

Am inceput prin a implementa un subprogram read_matrix care citeste o matrice a de 1000 pe 1000. Apoi am codat un subprogram prin care eu realizez parcurgerea dupa conditiile din problema.Pornesc cu i si j de la 0 ele reprezentand coordonatele matricii.Intr un while a carui conditie este a[i][j]!=0 verific daca i si j au aceeasi paritate adica piesa lui Gigel se afla pe un patrat alb atunci se va deplasa pe linia in care se afla.In variabila distanta adaug modulul lui a[i][j].In variabila x valoarea lui a[i][j] si apoi a[i][j] il initializez cu 0 fiindca deja a fost pe piesa aceasta.Variabila j isi va schimba valoarea in (j+x)%n, am pus modulo n fiindca exista cazul sa iasa de pe tabla.Daca j+x>n formula de mai sus ne duce fix pe piesa unde ar trebui sa ajunga in schimb daca j+x<0 restul impartirii la n va fi mai mic decat 0 si de aceea adaugam n pentru a avea un numar pozitiv care reprezinta in acelasi timp si coloana unde va ajunge piesa.Daca i si j nu au aceeasi paritate, piesa lui gigel este pe o piesa neagra si parcurge coloana pe care se situeaza si au loc prelucrarile din cazul patratului alb doar ca j ul nu isi va schimba valoarea ci i-ul. Apoi afisez in acest subprogram valoarea variabilei distanta in care am calculat cat a parcurs piesa lui gigel.Dupa am verificat daca j mai mic decat 26,atunci trb sa afisez j+'A' fiindca in cerinta se precizeaza ca fratele lui gigel a modificat coloanele cu litere.Daca j mai mare decat 25 si mai mic decat 702 care reprezinta numarul de combinatii de o litera si de doua litere trebuie sa afisam (j/26-1)+'A' si j%26+'A' pentru a realiza conversia corecta.Apoi daca j ul este mai mare decat 701 atunci avem combinatiile de 3 litere.Prima oara afisam litera A fiindca sunt 676 combinatii de 3 litere in care A este prima litera, iar noi suntem cu j intre 701 si 1000.Apoi afisam cele doua litere ramase analog cu ce am facut mai sus pt cazul in care j este intre 25 si 702.In main am citit n-ul care reprezinta dimensiunea matricii apoi am apelat subprogramele.

### PROBLEMA 4 NANOGRAM

Incep prin a citi valoarea variabilei t care reprezinta numarul de citiri care se vor realiza.Apoi cu un for de la i1=0 pana la t-1 citesc n si m care reprezinta dimensiunile matricei de la pasul i1.Apoi cu un for de la i=0 pana la i=n-1 citesc valoarea lui k care reprezinta numarul de grupuri colorate de pe linia i.Cu un for de la j=0 pana la j=k-1 citesc restrictiile pentru linii in matricea lines.Analog procedez pentru matrice columns doar ca primul for este pana la m pentru ca citim restrictiile pentru coloane.Apoi citim matricea a[i][j] de dimensiuni n m.La fiecare matrice retinem in variabila ok daca se respecta restrictiile pe linii si in variabila ok1 daca se respecta.Apoi numaram pe fiecare linie cate grupuri de 1 sunt cu variabila nrde1 care se reseteaza la 0 pe fiecare linie.Cand ajungem la a[i][j]=0 verificam intai ca nrde1 sa fie diferit de 0 si introducem in matricea numberofones valoarea obtinuta si resetam nr. Apoi verificam daca restrictiile de pe linii sunt egale cu elementele matricii numberofones.In caz de gasim un element al matricii numberofones diferit de un element din matricea lines ok-ul va deveni 0.Acelasi lucru se va face si pentru coloane doar ca in schimb variabila nrde1 se va reseta pe fiecare coloana si nu pe linie cum a fost initial asa ca primul for va fi cel al lui j si vom retine cate grupuri de 1 sunt in matricea numberofones1 si vom face verificarea daca elementele matricii numberofones1 sunt egale cu cele ale matricii columns.In caz de gasesc valori diferite ok1 va fi initializat cu 0.Verific daca ok==ok1 dar ambele sa fie si 1.In caz afirmativ afisez Corect,iar in caz negativ afisez Eroare.Acesti pasi au loc la fiecare pas i1 cu semnificatia de la inceput.


